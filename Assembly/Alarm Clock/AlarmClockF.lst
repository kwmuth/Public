                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              2   
0000              3   CLK EQU 33333333
0000              4   FREQ_0 EQU 2000
0000              5   FREQ_2 EQU 100
0000              6   TIMER0_RELOAD EQU 65536-(CLK/(12*2*FREQ_0))
0000              7   TIMER2_RELOAD EQU 65536-(CLK/(12*FREQ_2))
0000              8   TIMER1_RELOAD EQU 65536-(CLK/(12*2*FREQ_0))
0000              9   
0000             10   
0000             11   org 0000H
0000 0202FA      12            ljmp Startup
0003             13           
000B             14   org 000BH
000B 020039      15            ljmp ISR_timer0          
000E             16            
001B             17   org 001BH                                                                        ;Timer1 ISR
001B 020051      18            ljmp ISR_timer1
001E             19            
002B             20   org 002BH
002B 020063      21            ljmp ISR_timer2                                                 ;Timer2 ISR
002E             22           
0030             23   DSEG at 30H
0030             24   count10ms:       ds 1
0031             25   seconds:         ds 1
0032             26   minutes:         ds 1
0033             27   hours:           ds 1
0034             28   AlarmCount:      ds 3                                                    ;reserves 3 bytes
0037             29   
0000             30   BSEG
0000             31   meridiem:                dbit 1
0001             32   meridiemAlarm:   dbit 1
0002             33   alarmSet:                dbit 1
0003             34   
002E             35   CSEG
002E             36   
002E             37   myLUT:                                                                           ;Look-up table for 7-segment displays
002E C0F9A4B0    38       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
0033 9282F880    39       DB 092H, 082H, 0F8H, 080H, 090H
     90
0038 FF          40       DB 0FFH                                                              ;All segments off
0039             41   
0039             42   ISR_Timer0:
0039 758CFD      43       mov TH0, #high(TIMER0_RELOAD)
003C 758A4A      44       mov TL0, #low(TIMER0_RELOAD)
003F E530        45            mov a, count10ms
0041 9432        46            subb a, #50
0043 400C        47            jc ISR_timer1                                                    ; alternates beeping half the time
0045 C280        48            clr P0.0
0047 75E800      49            mov LEDRA, #0
004A 759500      50            mov LEDRB, #0
004D 759E00      51            mov LEDRC, #0
0050 32          52            reti
0051             53   
0051             54   ISR_timer1:      
0051 B280        55            cpl P0.0
0053 758DFD      56            mov TH1, #high(TIMER1_RELOAD)
0056 758B4A      57            mov TL1, #low(TIMER1_RELOAD)
0059 75E8FF      58            mov LEDRA, #11111111B
005C 7595FF      59            mov LEDRB, #11111111B
005F 759E03      60            mov LEDRC, #11B
0062 32          61            reti
0063             62            
0063             63   ;        cpl P0.0                                                                ;Compliments the bit of P0.0
0063             64   ;        mov TH0, #high(TIMER0_RELOAD)
0063             65   ;        mov TL0, #low(TIMER0_RELOAD)
0063             66   ;        reti
0063             67   
0063             68   ISR_Timer2:
0063 C0D0        69            push psw
0065 C0E0        70       push acc
0067 C083        71       push dph
0069 C082        72       push dpl
006B             73       
006B C2CF        74       clr TF2
006D B281        75            cpl P0.1
006F             76       
006F 20EA03      77       jb SWA.2, Alarm                                                      ;if SWA.2 is flipped, alarm is set, check if alarm should go off
0072 30EA05      78       jnb SWA.2, NoAlarm                                           ;if SWA.2 is off, no alarm is set 
0075             79   Alarm:
0075 120119      80       lcall CheckAlarm
0078 8007        81       sjmp Continue
007A             82   NoAlarm:         
007A 120296      83            lcall WriteClock                                                ;Display clock on LCD screen
007D C2FB        84            clr LEDG.3                      
007F C2A9        85            clr ET0                                                                         ;Clear Timer 0 ISR
0081             86   Continue:
0081 20E845      87       jb SWA.0, ISR_Timer2_L0                              ;Setting up time, does not increment anything
0084             88       
0084             89       ;Increment the counter and check if a second has passed
0084 0530        90       inc count10ms
0086 E530        91       mov a, count10ms
0088 B4643E      92       cjne A, #100, ISR_Timer2_L0
008B 753000      93       mov count10ms, #0
008E             94       
008E             95       ;increment seconds
008E E531        96       mov a, seconds
0090 2401        97       add a, #1
0092 D4          98       da a
0093 F531        99       mov seconds, a
0095 B46031     100       cjne A, #60H, ISR_Timer2_L0
0098 753100     101       mov seconds, #0
009B            102   
009B            103            ;increment minutes
009B E532       104       mov a, minutes
009D 2401       105       add a, #1
009F D4         106       da a
00A0 F532       107       mov minutes, a
00A2 B46024     108       cjne A, #60H, ISR_Timer2_L0
00A5 753200     109       mov minutes, #0
00A8            110   
00A8            111            ;increment hours
00A8 E533       112       mov a, hours
00AA 2401       113       add a, #1
00AC D4         114       da a
00AD F533       115       mov hours, a
00AF            116       
00AF B41211     117       cjne A, #12H, SkipMeridiem
00B2            118   CPLMeridiem:                                                             ;if the clock is at 12 hours, change AM/PM
00B2 B200       119            cpl meridiem
00B4 300003     120            jnb meridiem, AM
00B7 200006     121            jb meridiem, PM
00BA 759108     122   AM:      mov HEX0, #08H
00BD 0200C9     123            ljmp ISR_Timer2_L0
00C0 75910C     124   PM: mov HEX0, #0CH
00C3            125   SkipMeridiem:                                                            ;if clock is at 13 hours, move 1 to hours
00C3 B41303     126            cjne A, #13H, ISR_Timer2_L0
00C6 753301     127       mov hours, #1
00C9            128       
00C9            129   ISR_Timer2_L0:
00C9 20E944     130            jb SWA.1, Do_Nothing                                    ;if SWA.1 is up, increment clock, do not display
00CC 90002E     131            mov dptr, #myLUT
00CF            132   
00CF 300003     133            jnb meridiem, InitMeridiemAM                    ;Display AM/PM
00D2 200006     134            jb meridiem, InitMeridiemPM
00D5            135   InitMeridiemAM:
00D5 759108     136            mov HEX0, #08H
00D8 0200DE     137            ljmp M15
00DB            138   InitMeridiemPM:
00DB 75910C     139            mov HEX0, #0CH
00DE            140   
00DE            141   M15:
00DE E531       142            mov a, seconds                                                  ;Display seconds
00E0 540F       143            anl a, #0fH
00E2 93         144            movc a, @a+dptr
00E3 F593       145            mov HEX2, a
00E5 E531       146            mov a, seconds
00E7 C4         147            swap a
00E8 540F       148            anl a, #0fH
00EA 93         149            movc a, @a+dptr
00EB F594       150            mov HEX3, a
00ED            151   
00ED E532       152            mov a, minutes                                                  ;Display minutes
00EF 540F       153            anl a, #0fH     
00F1 93         154            movc a, @a+dptr
00F2 F58E       155            mov HEX4, a
00F4 E532       156            mov a, minutes
00F6 C4         157            swap a
00F7 540F       158            anl a, #0fH
00F9 93         159            movc a, @a+dptr
00FA F58F       160            mov HEX5, a
00FC            161   
00FC E533       162            mov a, hours                                                    ;Display hours
00FE 540F       163            anl a, #0fH
0100 93         164            movc a, @a+dptr
0101 F596       165            mov HEX6, a
0103 E533       166            mov a, hours
0105 20E402     167            jb acc.4, ISR_Timer2_L1                                         ;If hour between 1-9, nothing displayed on HEX7
0108 74A0       168            mov a, #0A0H
010A            169   ISR_Timer2_L1:
010A C4         170            swap a
010B 540F       171            anl a, #0fH
010D 93         172            movc a, @a+dptr
010E F597       173            mov HEX7, a
0110            174   
0110            175   Do_Nothing:
0110 D082       176            pop dpl
0112 D083       177            pop dph
0114 D0E0       178            pop acc
0116 D0D0       179            pop psw    
0118 32         180            reti
0119            181   
0119            182   ;Checks if clock time matches alarm time and sounds buzzer
0119            183   CheckAlarm:                                                              
0119 20A905     184            jb ET0, M20                                                             ;if interrupt 0 is enabled, write "wake up" to LCD
011C 120279     185            lcall WriteAlarm                                                ;otherwise write "alarm"
011F 8003       186            sjmp M21
0121 120252     187   M20:lcall WriteWakeUp
0124 200006     188   M21:jb meridiem, M22
0127 300109     189            jnb meridiemAlarm, CheckHour
012A 02015B     190            ljmp ReturnISR                                                  ;check if AM/PM matches
012D 200103     191   M22:jb meridiemAlarm, CheckHour
0130 02015B     192            ljmp ReturnISR
0133            193   CheckHour:
0133 E533       194            mov a, hours                                                    ;check if hours match
0135 8536F0     195            mov b, AlarmCount+2
0138 C3         196            clr c
0139 95F0       197            subb a,b
013B 6002       198            jz CheckMin
013D 801C       199            sjmp ReturnISR
013F            200   CheckMin:                                                                        ;check if minutes match
013F E532       201            mov a, minutes
0141 8535F0     202            mov b, AlarmCount+1
0144 C3         203            clr c
0145 95F0       204            subb a, b
0147 6002       205            jz CheckSec
0149 8010       206            sjmp ReturnISR
014B            207   CheckSec:                                                                        ;check if seconds match
014B E531       208            mov a, seconds
014D 8534F0     209            mov b, AlarmCount+0
0150 C3         210            clr c
0151 95F0       211            subb a,b 
0153 6002       212            jz SoundAlarm
0155 8004       213            sjmp ReturnISR
0157            214   SoundAlarm:                                                                      ;if time matches, enable timer 0 interrupt, return to timer 2 ISR
0157 D2FB       215            setb LEDG.3
0159 D2A9       216            setb ET0
015B            217   ReturnISR:
015B 22         218            ret
015C            219   
015C            220   ;Displays time we are setting alarm to on HEX display
015C            221   DisplayAlarmVal:         
015C 90002E     222            mov dptr, #myLUT        
015F            223   ; Display Digit 1
015F E534       224            mov A, AlarmCount+0
0161 540F       225       anl A, #0FH
0163 93         226       movc A, @A+dptr
0164 F593       227       mov HEX2, A   
0166            228   ; Display Digit 2
0166 E534       229       mov A, AlarmCount+0
0168 C4         230       swap A
0169 540F       231       anl A, #0FH
016B 93         232       movc A, @A+dptr
016C F594       233       mov HEX3, A         
016E            234   ; Display digit 3
016E E535       235            mov A, AlarmCount+1
0170 540F       236            anl A, #0FH
0172 93         237            movc A, @A+dptr
0173 F58E       238            mov HEX4, A        
0175            239   ;Display digit 4
0175 E535       240            mov A, AlarmCount+1
0177 C4         241            swap A
0178 540F       242            anl A, #0FH
017A 93         243            movc A, @A+dptr
017B F58F       244            mov HEX5, A        
017D            245   ;Display digit 5
017D E536       246            mov A, AlarmCount+2
017F 540F       247            anl A, #0FH
0181 93         248            movc A, @A+dptr
0182 F596       249            mov HEX6, A
0184            250   ;Display digit 6
0184 E536       251            mov A, AlarmCount+2
0186 20E402     252            jb acc.4, I0
0189 74A0       253            mov a, #0A0H
018B C4         254   I0:      swap A
018C 540F       255            anl A, #0FH
018E 93         256            movc A, @A+dptr
018F F597       257            mov HEX7, A
0191 22         258            ret
0192            259            
0192            260   SetAlarm:
0192 12015C     261            lcall DisplayAlarmVal                                   ;initially displays 12:00:00 AM on screen
0195 20F913     262            jb KEY.1, M6                                                    ;if KEY.1 is not pressed, check KEY.2
0198 30F9FD     263            jnb KEY.1, $                                                    ;wait for key to be released
019B E534       264            mov a, AlarmCount+0                                             ;increment seconds, and display
019D 2401       265       add a, #1
019F D4         266       da a
01A0 F534       267       mov AlarmCount+0, a
01A2 B460B7     268       cjne A, #60H, DisplayAlarmVal
01A5 753400     269       mov AlarmCount+0, #0
01A8 02015C     270       ljmp DisplayAlarmVal
01AB 20FA13     271   M6:      jb KEY.2, M7                                                    ;if KEY.2 is not pressed, check KEY.3
01AE 30FAFD     272       jnb KEY.2, $                                                         ;wait for key to be released
01B1 E535       273       mov a, AlarmCount+1                                          ;increment minutes and display
01B3 2401       274            add a, #1
01B5 D4         275            da a
01B6 F535       276            mov AlarmCount+1, a
01B8 B460A1     277       cjne A, #60H, DisplayAlarmVal
01BB 753500     278       mov AlarmCount+1, #0
01BE 02015C     279       ljmp DisplayAlarmVal
01C1 20FB16     280   M7: jb KEY.3, M9                                                         ;if KEY.3 is not pressed, check if SWA.1 is flipped
01C4 30FBFD     281            jnb KEY.3, $                                                    ;wait for key to be released
01C7 E536       282            mov a, AlarmCount+2                                             ;increment hours and display
01C9 2401       283            add a, #1
01CB D4         284            da a
01CC F536       285            mov AlarmCount+2, a
01CE 1201E0     286            lcall AlarmAMPM                                                         ;change AM/PM values every 12 hours
01D1 B41388     287       cjne A, #13H, DisplayAlarmVal
01D4 753601     288       mov AlarmCount+2, #1H
01D7 02015C     289       ljmp DisplayAlarmVal
01DA 20E9B5     290   M9:      jb SWA.1, SetAlarm                                              ;if SWA.1 is still flipped, jump back to beginning of function                  
01DD 020251     291            ljmp M4                                                                         ;if SWA.1 is not flipped, back to forever loop
01E0            292   
01E0            293   ;checks value stored in AlarmCount+2 and changes AM/PM accordingly
01E0            294   AlarmAMPM:                                                                       
01E0 E536       295            mov a, AlarmCount+2
01E2 B41210     296            cjne a, #12H, returnAlarm                               ;if not 12:00:00, AM/PM does not need to be changed
01E5 B201       297            cpl meridiemAlarm                                               ;if equal to 12, complement bit
01E7 300103     298            jnb meridiemAlarm, ChangeToAMAlarm              ;if bit = 0, change to AM
01EA 200105     299            jb meridiemAlarm, ChangeToPMAlarm               ;if bit = 1, change to PM
01ED            300   ChangeToAMAlarm:
01ED 759108     301            mov HEX0, #08H
01F0 8003       302            sjmp returnAlarm
01F2            303   ChangeToPMAlarm:
01F2 75910C     304            mov HEX0, #0CH
01F5            305   returnAlarm:                                                             ;return to set alarm function
01F5 22         306            ret
01F6            307           
01F6            308   ChangeMeridiem:
01F6 E533       309            mov a, hours
01F8 B41210     310            cjne a, #12H, ReturnMeridiem                    ;if not 12:00:00, AM/PM does not need to be changed
01FB B200       311            cpl meridiem                                                    ;if equal to 12, complement bit
01FD 300003     312            jnb meridiem, ChangeToAM                                ;if bit = 0, change to AM
0200 200005     313            jb meridiem, ChangeToPM                                         ;if bit = 1, change to PM
0203            314   ChangeToAM:
0203 759108     315            mov HEX0, #08H
0206 8003       316            sjmp ReturnMeridiem
0208            317   ChangeToPM:
0208 75910C     318            mov HEX0, #0CH
020B            319   ReturnMeridiem:                                                          ;return to set time function
020B 22         320            ret
020C            321   
020C            322   ;checks if SWA.0 or SWA.1 is flipped
020C            323   ;sets time 
020C            324   SetTime:
020C 20E983     325            jb SWA.1, SetAlarm                                              ;if SWA.1 is up, set alarm
020F 30E83F     326            jnb SWA.0, M4                                                   ;if SWA.0 is down, cannot set time, clock continues to increment
0212 20FB13     327            jb KEY.3, M1
0215 30FBFD     328       jnb KEY.3, $                                                         ;if KEY.3 is pressed, increment hours
0218 E533       329       mov a, hours
021A 2401       330            add a, #1
021C D4         331            da a
021D F533       332            mov hours, a
021F 1201F6     333            lcall ChangeMeridiem                                    ;change AM/PM accordingly
0222 B41303     334       cjne A, #13H, M1
0225 753301     335       mov hours, #1
0228            336   M1:        
0228 20FA10     337            jb KEY.2, M2
022B 30FAFD     338       jnb KEY.2, $                                                         ;if KEY.2 is pressed, increment minutes
022E E532       339       mov a, minutes
0230 2401       340            add a, #1
0232 D4         341            da a
0233 F532       342            mov minutes, a
0235 B46003     343            cjne A, #60H, M2
0238 753200     344            mov minutes, #0
023B            345   M2:        
023B 20F910     346            jb KEY.1, M3
023E 30F9FD     347            jnb KEY.1, $                                                    ;if KEY.1 is pressed, increment seconds
0241 E531       348            mov a, seconds
0243 2401       349            add a, #1
0245 D4         350            da a
0246 F531       351            mov seconds, a
0248 B46003     352            cjne A, #60H, M3
024B 753100     353            mov seconds, #0
024E            354   M3:        
024E 02020C     355            ljmp SetTime                                                    ;loop through function until SWA.0 is not flipped
0251            356   M4:      
0251 22         357            ret
0252            358   
0252            359   ;Writes WAKE UP to LCD screen when buzzer is sounded
0252            360   WriteWakeUp:
0252 1202B3     361            lcall ClearScreen
0255 7457       362            mov a, #'W'     
0257 1202E7     363            lcall LCD_put
025A 7441       364            mov a, #'A'     
025C 1202E7     365            lcall LCD_put
025F 744B       366            mov a, #'K'     
0261 1202E7     367            lcall LCD_put
0264 7445       368            mov a, #'E'     
0266 1202E7     369            lcall LCD_put
0269 7420       370            mov a, #' '     
026B 1202E7     371            lcall LCD_put
026E 7455       372            mov a, #'U'     
0270 1202E7     373            lcall LCD_put
0273 7450       374            mov a, #'P'     
0275 1202E7     375            lcall LCD_put
0278 22         376            ret
0279            377   
0279            378   ;Writes ALARM to LCD screen when alarm is set
0279            379   WriteAlarm:
0279 1202B3     380            lcall ClearScreen
027C 7441       381            mov a, #'A'     
027E 1202E7     382            lcall LCD_put
0281 744C       383            mov a, #'L'     
0283 1202E7     384            lcall LCD_put
0286 7441       385            mov a, #'A'     
0288 1202E7     386            lcall LCD_put
028B 7452       387            mov a, #'R'     
028D 1202E7     388            lcall LCD_put
0290 744D       389            mov a, #'M'     
0292 1202E7     390            lcall LCD_put
0295 22         391            ret
0296            392   
0296            393   ;Writes clock to LCD screen when clock is incrementing
0296            394   WriteClock:
0296 1202B3     395            lcall ClearScreen
0299 7443       396            mov a, #'C'     
029B 1202E7     397            lcall LCD_put
029E 744C       398            mov a, #'L'     
02A0 1202E7     399            lcall LCD_put
02A3 744F       400            mov a, #'O'     
02A5 1202E7     401            lcall LCD_put
02A8 7443       402            mov a, #'C'     
02AA 1202E7     403            lcall LCD_put
02AD 744B       404            mov a, #'K'     
02AF 1202E7     405            lcall LCD_put
02B2 22         406            ret
02B3            407   
02B3            408   ;Clears screen
02B3            409   ClearScreen:
02B3 7401       410            mov a, #01H 
02B5 1202D4     411            lcall LCD_command       
02B8 7928       412            mov R1, #40
02BA 1202C3     413            lcall Clr_loop
02BD 7480       414            mov a, #80H
02BF 1202D4     415            lcall LCD_command
02C2 22         416            ret
02C3            417   
02C3            418   
02C3            419   Clr_loop:
02C3 1202C9     420            lcall Wait40us
02C6 D9FB       421            djnz R1, Clr_loop
02C8 22         422            ret      
02C9            423            
02C9            424   Wait40us:
02C9 7895       425            mov R0, #149
02CB            426   X1: 
02CB 00         427            nop
02CC 00         428            nop
02CD 00         429            nop
02CE 00         430            nop
02CF 00         431            nop
02D0 00         432            nop
02D1 D8F8       433            djnz R0, X1                                                     ;9 machine cycles-> 9*30ns*149=40us
02D3 22         434       ret
02D4            435   
02D4            436   LCD_command:
02D4 F5D9       437            mov     LCD_DATA, A
02D6 C2DA       438            clr     LCD_RS
02D8 00         439            nop
02D9 00         440            nop
02DA D2D9       441            setb LCD_EN                                                     ;Enable pulse should be at least 230 ns
02DC 00         442            nop
02DD 00         443            nop
02DE 00         444            nop
02DF 00         445            nop
02E0 00         446            nop
02E1 00         447            nop
02E2 C2D9       448            clr     LCD_EN
02E4 0202C9     449            ljmp Wait40us
02E7            450   
02E7            451   LCD_put:
02E7 F5D9       452            mov     LCD_DATA, A
02E9 D2DA       453            setb LCD_RS
02EB 00         454            nop
02EC 00         455            nop
02ED D2D9       456            setb LCD_EN                                                     ;Enable pulse should be at least 230 ns
02EF 00         457            nop
02F0 00         458            nop
02F1 00         459            nop
02F2 00         460            nop
02F3 00         461            nop
02F4 00         462            nop
02F5 C2D9       463            clr     LCD_EN
02F7 0202C9     464            ljmp Wait40us   
02FA            465            
02FA            466   Startup:
02FA 75817F     467            mov SP, #7FH
02FD 75E800     468            mov LEDRA,#0
0300 759500     469            mov LEDRB,#0
0303 759E00     470            mov LEDRC,#0
0306 75F800     471            mov LEDG,#0
0309            472            
0309 759A03     473            mov P0MOD, #00000011B                                   ;P0.0, P0.1 are outputs.  P0.1 is used for testing Timer 2!
030C D280       474            setb P0.0                                               ;Sets P0.0 to 1
030E            475   
030E 758901     476            mov TMOD,  #00000001B                                   ;GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0311 C28C       477            clr TR0                                                 ;Disable timer 0
0313 C28D       478            clr TF0                                                 ;Clear timer 0 flag
0315 758CFD     479            mov TH0, #high(TIMER0_RELOAD)                   ;Timer low 8-bits
0318 758A4A     480            mov TL0, #low(TIMER0_RELOAD)                    ;Timer high 8-bits
031B D28C       481            setb TR0                                                ;Enable timer 0
031D C2A9       482            clr ET0                                                 ;Disable timer 0 interrupt
031F            483            
031F 758910     484            mov TMOD,  #00010000B                                   ;GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0322 C28E       485            clr TR1                                                 ;Disable timer 0
0324 C28F       486            clr TF1                                                 ;Clear timer 0 flag
0326 758DFD     487            mov TH1, #high(TIMER1_RELOAD)                   ;Timer low 8-bits
0329 758B4A     488            mov TL1, #low(TIMER1_RELOAD)                    ;Timer high 8-bits
032C D28E       489            setb TR1                                                ;Enable timer 0
032E C2AB       490            clr ET1
0330            491            
0330 75C800     492            mov T2CON, #00H                                                 ;Autoreload is enabled, work as a timer
0333 C2CA       493       clr TR2
0335 C2CF       494       clr TF2                                                                              
0337 75CB93     495       mov RCAP2H,#high(TIMER2_RELOAD)                      ;Set up timer 2 to interrupt every 10ms
033A 75CA7F     496       mov RCAP2L,#low(TIMER2_RELOAD)
033D D2CA       497       setb TR2                                                             ;Enable timer 2
033F D2AD       498       setb ET2                                                             ;Enable timer 2 interrupt
0341            499   
0341 D2AF       500       setb EA                                                              ;Enable all interrupts
0343            501       
0343 D2DB       502       setb LCD_ON
0345 C2D9       503       clr LCD_EN                                                           ;Default state of enable must be zero
0347 1202C9     504       lcall Wait40us
034A            505       
034A 75DAFF     506       mov LCD_MOD, #0xff                                           ;Use LCD_DATA as output port
034D C2D8       507       clr LCD_RW                                                           ;Only writing to the LCD in this code.
034F            508            
034F 740C       509            mov a, #0ch                                                     ;Display on command
0351 1202D4     510            lcall LCD_command
0354 7438       511            mov a, #38H                                                     ;8-bits interface, 2 lines, 5x7 characters
0356 1202D4     512            lcall LCD_command
0359            513            
0359 120296     514            lcall WriteClock
035C            515      
035C 753100     516       mov seconds, #00H
035F 753200     517            mov minutes, #00H
0362 753312     518            mov hours, #12H
0365            519           
0365 C200       520            clr meridiem
0367 C201       521            clr meridiemAlarm
0369            522   
0369 753400     523       mov AlarmCount+0, #00H
036C 753500     524            mov AlarmCount+1, #00H
036F 753612     525            mov AlarmCount+2, #12H
0372            526   
0372            527   Forever:
0372 12020C     528            lcall SetTime
0375 80FB       529            sjmp Forever
0377            530   EN
