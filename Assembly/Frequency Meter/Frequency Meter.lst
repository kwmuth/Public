                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              2   
0000              3   CSEG
0000              4   org 0000H
0000 02011A       5      ljmp MyProgram
0003              6   
0003              7            ;cseg                                              ; Absolute CODE segements at fixed memory locations
0003              8       myLUT:                                         ; Look-up table for 7-seg displays
0003 C0F9A4B0     9       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H                ; 0 TO 4
     99
0008 9282F880    10       DB 092H, 082H, 0F8H, 080H, 090H, 0FFH          ; 4 TO 9, OFF
     90FF
000E             11    
000E             12   ;cseg
000E             13   hex2bcd:
000E C0E0        14           push acc
0010 C0D0        15           push psw
0012 C000        16           push AR0
0014             17           
0014 E4          18           clr a
0015 FB          19           mov R3, a ; Initialize registers to 00-00-00 
0016 FC          20           mov R4, a
0017 FD          21           mov R5, a
0018 FE          22           mov R6, a
0019 75F018      23           mov b, #24  ; Loop counter.
001C             24   
001C             25   hex2bcd_L0:
001C             26           ; Shift binary left        
001C E9          27           mov a, R1
001D A2E7        28           mov c, acc.7 ; This way (R2-0)B remains unchanged!
001F E8          29           mov a, R0
0020 33          30           rlc a
0021 F8          31           mov R0, a
0022 E9          32           mov a, R1
0023 33          33           rlc a
0024 F9          34           mov R1, a
0025 EA          35           mov a, R2
0026 33          36           rlc a
0027 FA          37           mov R2, a
0028             38           
0028             39       
0028             40           ; Perform bcd + bcd + carry using BCD arithmetic
0028 EB          41           mov a, R3
0029 3B          42           addc a, R3
002A D4          43           da a ;decimal adjust
002B FB          44           mov R3, a
002C EC          45           mov a, R4
002D 3C          46           addc a, R4
002E D4          47           da a
002F FC          48           mov R4, a
0030 ED          49           mov a, R5
0031 3D          50           addc a, R5
0032 D4          51           da a
0033 FD          52           mov R5, a
0034 EE          53           mov a, R6
0035 3E          54           addc a, R6
0036 D4          55           da a
0037 FE          56           mov R6, a
0038             57         
0038             58   
0038 D5F0E1      59           djnz b, hex2bcd_L0
003B             60   
003B D000        61           pop AR0
003D D0D0        62           pop psw
003F D0E0        63           pop acc
0041 22          64           ret
0042             65           
0042             66   Display:
0042 900003      67           mov dptr, #myLUT
0045             68           ; Display Digit 0
0045 EB          69           mov A, R3
0046 540F        70           anl a, #0fh
0048 93          71           movc A, @A+dptr
0049 F591        72           mov HEX0, A
004B             73           ; Display Digit 1
004B EB          74           mov A, R3
004C C4          75           swap a
004D 540F        76           anl a, #0fh
004F 93          77           movc A, @A+dptr
0050 F592        78           mov HEX1, A
0052             79           ; Display Digit 2
0052 EC          80           mov A, R4
0053 540F        81           anl a, #0fh
0055 93          82           movc A, @A+dptr
0056 F593        83           mov HEX2, A
0058             84           ; Display Digit 3
0058 EC          85           mov A, R4
0059 C4          86           swap a
005A 540F        87           anl a, #0fh
005C 93          88           movc A, @A+dptr
005D F594        89           mov HEX3, A
005F             90           ; Display Digit 4
005F ED          91           mov A, R5
0060 540F        92           anl a, #0fh
0062 93          93           movc A, @A+dptr
0063 F58E        94           mov HEX4, A
0065             95           ; Display Digit 5
0065 ED          96           mov A, R5
0066 C4          97           swap a
0067 540F        98           anl a, #0fh
0069 93          99           movc A, @A+dptr
006A F58F       100           mov HEX5, A
006C            101           ; Display Digit 6
006C EE         102           mov A, R6
006D 540F       103           anl a, #0fh
006F 93         104           movc A, @A+dptr
0070 F596       105           mov HEX6, A
0072            106           ; Display Digit 7
0072 EE         107           mov A, R6
0073 C4         108           swap a
0074 540F       109           anl a, #0fh
0076 93         110           movc A, @A+dptr
0077 F597       111           mov HEX7, A
0079 22         112           ret
007A            113   
007A            114   correctBCDvalues:
007A            115           ;if high part of R6 is zero
007A EE         116           mov a,R6
007B 54F0       117           anl a,#0F0H
007D C4         118           swap a
007E 7057       119           jnz correctBCDvalues_return
0080            120           ;turn off HEX7:
0080 EE         121           mov a,R6
0081 540F       122           anl a,#0FH
0083 44A0       123           orl a,#0A0H
0085 FE         124           mov R6,a
0086            125           
0086            126           ;if low part of R6 is zero
0086 EE         127           mov a,R6
0087 540F       128           anl a,#0FH
0089 704C       129           jnz correctBCDvalues_return ;if accumulator is not zero, jump to function
008B            130           ;turn off HEX6:
008B EE         131           mov a,R6
008C 54F0       132           anl a,#0F0H
008E 440A       133           orl a,#0AH
0090 FE         134           mov R6,a
0091            135           
0091            136           ;if high part of R5 is zero
0091 ED         137           mov a,R5
0092 54F0       138           anl a,#0F0H
0094 C4         139           swap a
0095 7040       140           jnz correctBCDvalues_return
0097            141           ;turn off HEX5
0097 ED         142           mov a,R5
0098 540F       143           anl a,#0FH
009A 44A0       144           orl a,#0A0H
009C FD         145           mov R5,a
009D            146           
009D            147           ;if low part of R5 is zero
009D ED         148           mov a,R5
009E 540F       149           anl a,#0FH
00A0 7035       150           jnz correctBCDvalues_return
00A2            151           ;turn off HEX4
00A2 ED         152           mov a,R5
00A3 54F0       153           anl a,#0F0H
00A5 440A       154           orl a,#0AH
00A7 FD         155           mov R5,a
00A8            156           
00A8            157           ;if high part of R4 is zero
00A8 EC         158           mov a,R4
00A9 54F0       159           anl a,#0F0H
00AB C4         160           swap a
00AC 7029       161           jnz correctBCDvalues_return
00AE            162           ;turn off HEX3
00AE EC         163           mov a,R4
00AF 540F       164           anl a,#0FH
00B1 44A0       165           orl a,#0A0H
00B3 FC         166           mov R4,a
00B4            167           
00B4            168           ;if low part of R4 is zero
00B4 EC         169           mov a,R4
00B5 540F       170           anl a,#0FH
00B7 701E       171           jnz correctBCDvalues_return
00B9            172           ;turn off HEX2
00B9 EC         173           mov a,R4
00BA 54F0       174           anl a,#0F0H
00BC 440A       175           orl a,#0AH
00BE FC         176           mov R4,a
00BF            177           
00BF            178           ;if high part of R3 is zero
00BF EB         179           mov a,R3
00C0 54F0       180           anl a,#0F0H
00C2 C4         181           swap a
00C3 7012       182           jnz correctBCDvalues_return
00C5            183           ;turn off HEX1
00C5 EB         184           mov a,R3
00C6 540F       185           anl a,#0FH
00C8 44A0       186           orl a,#0A0H
00CA FB         187           mov R3,a
00CB            188           
00CB            189           ;if low part of R3 is zero
00CB EB         190           mov a,R3
00CC 540F       191           anl a,#0FH
00CE 7007       192           jnz correctBCDvalues_return
00D0            193           ;turn off HEX0
00D0 EB         194           mov a,R3
00D1 54F0       195           anl a,#0F0H
00D3 440A       196           orl a,#0AH
00D5 FB         197           mov R3,a
00D6            198           
00D6 22         199           ret
00D7            200           
00D7            201           correctBCDvalues_return: 
00D7 22         202           ret ;returns to forever function
00D8            203   
00D8            204   add24:
00D8            205           ;x=x+y R0 and R1 will hold : R7*65536
00D8 E8         206           mov a,R0
00D9 2B         207           add a,R3
00DA F8         208           mov R0,a
00DB E9         209           mov a,R1
00DC 3C         210           addc a,R4
00DD F9         211           mov R1,a
00DE EA         212           mov a,R2
00DF 3D         213           addc a,R5
00E0 FA         214           mov R2,a
00E1 22         215           ret
00E2            216   
00E2            217   multiply24:
00E2            218           ;x=65536*R7
00E2 7BFF       219           mov R3,#0FFH
00E4 7CFF       220           mov R4,#0FFH
00E6 7D00       221           mov R5,#0
00E8 7800       222           mov R0,#0
00EA 7900       223           mov R1,#0
00EC 7A00       224           mov R2,#0
00EE EF         225           mov a,R7
00EF FE         226           mov R6,a ;move the number of overflows to R6
00F0 7001       227           jnz multiply24_L1 ;if accumulator does not equal zero jump to loop
00F2 22         228           ret ;if number of overflows equal zero, return
00F3            229           multiply24_L1:
00F3 11D8       230           call add24 ;x=x+65536
00F5 1E         231           dec R6
00F6 EE         232           mov a,R6
00F7 70FA       233           jnz multiply24_L1 ;if accumulator is not zero, repeat loop 
00F9 22         234           ret ;if accumulator is zero, return
00FA            235           
00FA            236   
00FA            237   ; On the DE2-8052, with a 33.33MHz clock, one cycle takes 30ns
00FA            238   Wait1s:
00FA 7F00       239           mov R7,#0 ; will store the amount of overflows in 1 second
00FC 7AB0       240           mov R2, #176
00FE 79FA       241           L3: mov R1, #250
0100 78FA       242           L2: mov R0, #250
0102 D8FE       243           L1: djnz R0, L1 ;3 machine cycles -> 3*30ns*250=22.5us
0104 308D03     244           jnb TF0, continue
0107            245      
0107 C28D       246           clr TF0 ;clears overflow flag after it is set
0109 0F         247           inc R7 ;increment R7
010A            248           
010A            249           continue:
010A D9F4       250           djnz R1, L2 ; 22.5us*250=5.625ms
010C DAF0       251           djnz R2, L3 ; 5.625ms*180=1s (approximately)
010E 22         252           ret
010F            253   
010F            254   
010F            255   ;Initializes timer/counter 0 as a 16-bit counter
010F            256   InitTimer0:
010F C28C       257           clr TR0 ; Stop timer 0
0111 74F0       258           mov a, #11110000B ; Clear the bits of timer 0
0113 5589       259           anl a,TMOD
0115 4405       260           orl a, #00000101B ; Set timer 0 as 16-bit counter
0117 F589       261           mov TMOD, a
0119 22         262           ret
011A            263   
011A            264   MyProgram:
011A 75817F     265            mov SP, #7FH ; Set the stack pointer to the begining of idata
011D 75E800     266           mov LEDRA, #0
0120 759500     267           mov LEDRB, #0
0123 759E00     268           mov LEDRC, #0
0126 75F800     269           mov LEDG, #0
0129            270   
0129            271   Forever:        
0129 D2B4       272           setb T0 ;configures T0 as an input       
012B 12010F     273           lcall InitTimer0 ;1) Set up the counter to count pulses from T0
012E C28C       274           clr TR0 ;stop counter 0
0130 758A00     275           mov TL0, #0 ; Reset counter low
0133 758C00     276           mov TH0, #0 ; Reset counter high
0136 D28C       277           setb TR0 ; Start counting
0138 1200FA     278           lcall Wait1s ; Wait one second
013B C28C       279           clr TR0 ; Stop counter 0
013D            280           
013D            281           ;Display values of counter registers, and the overflow register (R7)
013D            282           ;mov LEDRB,TH0
013D            283           ;mov LEDRA,TL0
013D            284           ;mov LEDG,R7
013D            285           
013D 11E2       286           call multiply24
013F AB8A       287           mov R3,TL0
0141 AC8C       288           mov R4,TH0
0143 7D00       289           mov R5,#0
0145 11D8       290           call add24
0147            291           
0147            292           ;mov LEDRB,R2
0147            293           ;mov LEDRA,R1
0147            294           ;mov LEDG,R0
0147            295           
0147 110E       296           call hex2bcd
0149 117A       297           call correctBCDvalues
014B 1142       298           call display
014D            299           
014D 80DA       300            jmp Forever
014F            301   
014F            302   EN
