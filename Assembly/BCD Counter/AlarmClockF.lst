                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              2   
0000              3   CLK EQU 33333333
0000              4   FREQ_0 EQU 2000
0000              5   FREQ_2 EQU 100
0000              6   TIMER0_RELOAD EQU 65536-(CLK/(12*2*FREQ_0))
0000              7   TIMER2_RELOAD EQU 65536-(CLK/(12*FREQ_2))
0000              8   TIMER1_RELOAD EQU 65536-(CLK/(12*2*FREQ_0))
0000              9   
0000             10   
0000             11   org 0000H
0000 0202E8      12            ljmp Startup
0003             13           
000B             14   org 000BH
000B 020039      15            ljmp ISR_timer0                                                         ;Timer1 ISR
000E             16            
002B             17   org 002BH
002B 020051      18            ljmp ISR_timer2                                                 ;Timer2 ISR
002E             19           
0030             20   DSEG at 30H
0030             21   count10ms:       ds 1
0031             22   seconds:         ds 1
0032             23   minutes:         ds 1
0033             24   hours:           ds 1
0034             25   AlarmCount:      ds 3
0037             26   
0000             27   BSEG
0000             28   meridiem:        dbit 1
0001             29   meridiemAlarm: dbit 1
0002             30   alarmSet:        dbit 1
0003             31   
002E             32   CSEG
002E             33   
002E             34   myLUT:                                                                           ;Look-up table for 7-segment displays
002E C0F9A4B0    35       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
0033 9282F880    36       DB 092H, 082H, 0F8H, 080H, 090H
     90
0038 FF          37       DB 0FFH                                                              ;All segments off
0039             38   
0039             39   ISR_Timer0:
0039             40   
0039 E530        41            mov a, count10ms
003B 9432        42            subb a, #50
003D 4006        43            jc ISR_timer1_L0 ; alternates beeping half the time
003F C280        44            clr P0.0
0041 75E800      45            mov LEDRA, #0
0044 32          46            reti
0045             47   
0045             48   ISR_timer1_L0:   
0045 B280        49            cpl P0.0
0047 758DFD      50            mov TH1, #high(TIMER1_RELOAD)
004A 758B4A      51            mov TL1, #low(TIMER1_RELOAD)
004D 75E801      52            mov LEDRA, #1
0050 32          53            reti
0051             54            
0051             55   ;        cpl P0.0                                                                ;Compliments the bit of P0.0
0051             56   ;        mov TH0, #high(TIMER0_RELOAD)
0051             57   ;        mov TL0, #low(TIMER0_RELOAD)
0051             58   ;        reti
0051             59   
0051             60   ISR_Timer2:
0051 C0D0        61            push psw
0053 C0E0        62       push acc
0055 C083        63       push dph
0057 C082        64       push dpl
0059             65       
0059 C2CF        66       clr TF2
005B B281        67            cpl P0.1
005D             68       
005D 20EA03      69       jb SWA.2, Alarm                                                      ;if SWA.2 is flipped, alarm is set, check if alarm should go off
0060 30EA05      70       jnb SWA.2, NoAlarm                                           ;if SWA.2 is off, no alarm is set 
0063             71   Alarm:
0063 120107      72       lcall CheckAlarm
0066 8007        73       sjmp Continue
0068             74   NoAlarm:         
0068 120284      75            lcall WriteClock                                                ;Display clock on LCD screen
006B C2FB        76            clr LEDG.3                      
006D C2A9        77            clr ET0                                                                         ;Clear Timer 0 ISR
006F             78   Continue:
006F 20E845      79       jb SWA.0, ISR_Timer2_L0                              ;Setting up time, does not increment anything
0072             80       
0072             81       ;Increment the counter and check if a second has passed
0072 0530        82       inc count10ms
0074 E530        83       mov a, count10ms
0076 B4643E      84       cjne A, #100, ISR_Timer2_L0
0079 753000      85       mov count10ms, #0
007C             86       
007C             87       ;increment seconds
007C E531        88       mov a, seconds
007E 2401        89       add a, #1
0080 D4          90       da a
0081 F531        91       mov seconds, a
0083 B46031      92       cjne A, #60H, ISR_Timer2_L0
0086 753100      93       mov seconds, #0
0089             94   
0089             95            ;increment minutes
0089 E532        96       mov a, minutes
008B 2401        97       add a, #1
008D D4          98       da a
008E F532        99       mov minutes, a
0090 B46024     100       cjne A, #60H, ISR_Timer2_L0
0093 753200     101       mov minutes, #0
0096            102   
0096            103            ;increment hours
0096 E533       104       mov a, hours
0098 2401       105       add a, #1
009A D4         106       da a
009B F533       107       mov hours, a
009D            108       
009D B41211     109       cjne A, #12H, SkipMeridiem
00A0            110   CPLMeridiem:                                                             ;if the clock is at 12 hours, change AM/PM
00A0 B200       111            cpl meridiem
00A2 300003     112            jnb meridiem, AM
00A5 200006     113            jb meridiem, PM
00A8 759108     114   AM:      mov HEX0, #08H
00AB 0200B7     115            ljmp ISR_Timer2_L0
00AE 75910C     116   PM: mov HEX0, #0CH
00B1            117   SkipMeridiem:                                                            ;if clock is at 13 hours, move 1 to hours
00B1 B41303     118            cjne A, #13H, ISR_Timer2_L0
00B4 753301     119       mov hours, #1
00B7            120       
00B7            121   ISR_Timer2_L0:
00B7 20E944     122            jb SWA.1, Do_Nothing                                    ;if SWA.1 is up, increment clock, do not display
00BA 90002E     123            mov dptr, #myLUT
00BD            124   
00BD 300003     125            jnb meridiem, InitMeridiemAM                    ;Display AM/PM
00C0 200006     126            jb meridiem, InitMeridiemPM
00C3            127   InitMeridiemAM:
00C3 759108     128            mov HEX0, #08H
00C6 0200CC     129            ljmp M15
00C9            130   InitMeridiemPM:
00C9 75910C     131            mov HEX0, #0CH
00CC            132   
00CC            133   M15:
00CC E531       134            mov a, seconds                                                  ;Display seconds
00CE 540F       135            anl a, #0fH
00D0 93         136            movc a, @a+dptr
00D1 F593       137            mov HEX2, a
00D3 E531       138            mov a, seconds
00D5 C4         139            swap a
00D6 540F       140            anl a, #0fH
00D8 93         141            movc a, @a+dptr
00D9 F594       142            mov HEX3, a
00DB            143   
00DB E532       144            mov a, minutes                                                  ;Display minutes
00DD 540F       145            anl a, #0fH     
00DF 93         146            movc a, @a+dptr
00E0 F58E       147            mov HEX4, a
00E2 E532       148            mov a, minutes
00E4 C4         149            swap a
00E5 540F       150            anl a, #0fH
00E7 93         151            movc a, @a+dptr
00E8 F58F       152            mov HEX5, a
00EA            153   
00EA E533       154            mov a, hours                                                    ;Display hours
00EC 540F       155            anl a, #0fH
00EE 93         156            movc a, @a+dptr
00EF F596       157            mov HEX6, a
00F1 E533       158            mov a, hours
00F3 20E402     159            jb acc.4, ISR_Timer2_L1                                         ;If hour between 1-9, nothing displayed on HEX7
00F6 74A0       160            mov a, #0A0H
00F8            161   ISR_Timer2_L1:
00F8 C4         162            swap a
00F9 540F       163            anl a, #0fH
00FB 93         164            movc a, @a+dptr
00FC F597       165            mov HEX7, a
00FE            166   
00FE            167   Do_Nothing:
00FE D082       168            pop dpl
0100 D083       169            pop dph
0102 D0E0       170            pop acc
0104 D0D0       171            pop psw    
0106 32         172            reti
0107            173   
0107            174   ;Checks if clock time matches alarm time and sounds buzzer
0107            175   CheckAlarm:                                                              
0107 20A905     176            jb ET0, M20                                                             ;if interrupt 0 is enabled, write "wake up" to LCD
010A 120267     177            lcall WriteAlarm                                                ;otherwise write "alarm"
010D 8003       178            sjmp M21
010F 120240     179   M20:lcall WriteWakeUp
0112 200006     180   M21:jb meridiem, M22
0115 300109     181            jnb meridiemAlarm, CheckHour
0118 020149     182            ljmp ReturnISR                                                  ;check if AM/PM matches
011B 200103     183   M22:jb meridiemAlarm, CheckHour
011E 020149     184            ljmp ReturnISR
0121            185   CheckHour:
0121 E533       186            mov a, hours                                                    ;check if hours match
0123 8536F0     187            mov b, AlarmCount+2
0126 C3         188            clr c
0127 95F0       189            subb a,b
0129 6002       190            jz CheckMin
012B 801C       191            sjmp ReturnISR
012D            192   CheckMin:                                                                        ;check if minutes match
012D E532       193            mov a, minutes
012F 8535F0     194            mov b, AlarmCount+1
0132 C3         195            clr c
0133 95F0       196            subb a, b
0135 6002       197            jz CheckSec
0137 8010       198            sjmp ReturnISR
0139            199   CheckSec:                                                                        ;check if seconds match
0139 E531       200            mov a, seconds
013B 8534F0     201            mov b, AlarmCount+0
013E C3         202            clr c
013F 95F0       203            subb a,b 
0141 6002       204            jz SoundAlarm
0143 8004       205            sjmp ReturnISR
0145            206   SoundAlarm:                                                                      ;if time matches, enable timer 0 interrupt, return to timer 2 ISR
0145 D2FB       207            setb LEDG.3
0147 D2A9       208            setb ET0
0149            209   ReturnISR:
0149 22         210            ret
014A            211   
014A            212   ;Displays time we are setting alarm to on HEX display
014A            213   DisplayAlarmVal:         
014A 90002E     214            mov dptr, #myLUT        
014D            215   ; Display Digit 1
014D E534       216            mov A, AlarmCount+0
014F 540F       217       anl A, #0FH
0151 93         218       movc A, @A+dptr
0152 F593       219       mov HEX2, A   
0154            220   ; Display Digit 2
0154 E534       221       mov A, AlarmCount+0
0156 C4         222       swap A
0157 540F       223       anl A, #0FH
0159 93         224       movc A, @A+dptr
015A F594       225       mov HEX3, A         
015C            226   ; Display digit 3
015C E535       227            mov A, AlarmCount+1
015E 540F       228            anl A, #0FH
0160 93         229            movc A, @A+dptr
0161 F58E       230            mov HEX4, A        
0163            231   ;Display digit 4
0163 E535       232            mov A, AlarmCount+1
0165 C4         233            swap A
0166 540F       234            anl A, #0FH
0168 93         235            movc A, @A+dptr
0169 F58F       236            mov HEX5, A        
016B            237   ;Display digit 5
016B E536       238            mov A, AlarmCount+2
016D 540F       239            anl A, #0FH
016F 93         240            movc A, @A+dptr
0170 F596       241            mov HEX6, A
0172            242   ;Display digit 6
0172 E536       243            mov A, AlarmCount+2
0174 20E402     244            jb acc.4, I0
0177 74A0       245            mov a, #0A0H
0179 C4         246   I0:      swap A
017A 540F       247            anl A, #0FH
017C 93         248            movc A, @A+dptr
017D F597       249            mov HEX7, A
017F 22         250            ret
0180            251            
0180            252   SetAlarm:
0180 12014A     253            lcall DisplayAlarmVal                                   ;initially displays 12:00:00 AM on screen
0183 20F913     254            jb KEY.1, M6                                                    ;if KEY.1 is not pressed, check KEY.2
0186 30F9FD     255            jnb KEY.1, $                                                    ;wait for key to be released
0189 E534       256            mov a, AlarmCount+0                                             ;increment seconds, and display
018B 2401       257       add a, #1
018D D4         258       da a
018E F534       259       mov AlarmCount+0, a
0190 B460B7     260       cjne A, #60H, DisplayAlarmVal
0193 753400     261       mov AlarmCount+0, #0
0196 02014A     262       ljmp DisplayAlarmVal
0199 20FA13     263   M6:      jb KEY.2, M7                                                    ;if KEY.2 is not pressed, check KEY.3
019C 30FAFD     264       jnb KEY.2, $                                                         ;wait for key to be released
019F E535       265       mov a, AlarmCount+1                                          ;increment minutes and display
01A1 2401       266            add a, #1
01A3 D4         267            da a
01A4 F535       268            mov AlarmCount+1, a
01A6 B460A1     269       cjne A, #60H, DisplayAlarmVal
01A9 753500     270       mov AlarmCount+1, #0
01AC 02014A     271       ljmp DisplayAlarmVal
01AF 20FB16     272   M7: jb KEY.3, M9                                                         ;if KEY.3 is not pressed, check if SWA.1 is flipped
01B2 30FBFD     273            jnb KEY.3, $                                                    ;wait for key to be released
01B5 E536       274            mov a, AlarmCount+2                                             ;increment hours and display
01B7 2401       275            add a, #1
01B9 D4         276            da a
01BA F536       277            mov AlarmCount+2, a
01BC 1201CE     278            lcall AlarmAMPM                                                         ;change AM/PM values every 12 hours
01BF B41388     279       cjne A, #13H, DisplayAlarmVal
01C2 753601     280       mov AlarmCount+2, #1H
01C5 02014A     281       ljmp DisplayAlarmVal
01C8 20E9B5     282   M9:      jb SWA.1, SetAlarm                                              ;if SWA.1 is still flipped, jump back to beginning of function                  
01CB 02023F     283            ljmp M4                                                                         ;if SWA.1 is not flipped, back to forever loop
01CE            284   
01CE            285   ;checks value stored in AlarmCount+2 and changes AM/PM accordingly
01CE            286   AlarmAMPM:                                                                       
01CE E536       287            mov a, AlarmCount+2
01D0 B41210     288            cjne a, #12H, returnAlarm                               ;if not 12:00:00, AM/PM does not need to be changed
01D3 B201       289            cpl meridiemAlarm                                               ;if equal to 12, complement bit
01D5 300103     290            jnb meridiemAlarm, ChangeToAMAlarm              ;if bit = 0, change to AM
01D8 200105     291            jb meridiemAlarm, ChangeToPMAlarm               ;if bit = 1, change to PM
01DB            292   ChangeToAMAlarm:
01DB 759108     293            mov HEX0, #08H
01DE 8003       294            sjmp returnAlarm
01E0            295   ChangeToPMAlarm:
01E0 75910C     296            mov HEX0, #0CH
01E3            297   returnAlarm:                                                             ;return to set alarm function
01E3 22         298            ret
01E4            299           
01E4            300   ChangeMeridiem:
01E4 E533       301            mov a, hours
01E6 B41210     302            cjne a, #12H, ReturnMeridiem                    ;if not 12:00:00, AM/PM does not need to be changed
01E9 B200       303            cpl meridiem                                                    ;if equal to 12, complement bit
01EB 300003     304   CM:      jnb meridiem, ChangeToAM                                ;if bit = 0, change to AM
01EE 200005     305            jb meridiem, ChangeToPM                                         ;if bit = 1, change to PM
01F1            306   ChangeToAM:
01F1 759108     307            mov HEX0, #08H
01F4 8003       308            sjmp ReturnMeridiem
01F6            309   ChangeToPM:
01F6 75910C     310            mov HEX0, #0CH
01F9            311   ReturnMeridiem:                                                          ;return to set time function
01F9 22         312            ret
01FA            313   
01FA            314   ;checks if SWA.0 or SWA.1 is flipped
01FA            315   ;sets time 
01FA            316   SetTime:
01FA 20E983     317            jb SWA.1, SetAlarm                                              ;if SWA.1 is up, set alarm
01FD 30E83F     318            jnb SWA.0, M4                                                   ;if SWA.0 is down, cannot set time, clock continues to increment
0200 20FB13     319            jb KEY.3, M1
0203 30FBFD     320       jnb KEY.3, $                                                         ;if KEY.3 is pressed, increment hours
0206 E533       321       mov a, hours
0208 2401       322            add a, #1
020A D4         323            da a
020B F533       324            mov hours, a
020D 1201E4     325            lcall ChangeMeridiem                                    ;change AM/PM accordingly
0210 B41303     326       cjne A, #13H, M1
0213 753301     327       mov hours, #1
0216            328   M1:        
0216 20FA10     329            jb KEY.2, M2
0219 30FAFD     330       jnb KEY.2, $                                                         ;if KEY.2 is pressed, increment minutes
021C E532       331       mov a, minutes
021E 2401       332            add a, #1
0220 D4         333            da a
0221 F532       334            mov minutes, a
0223 B46003     335            cjne A, #60H, M2
0226 753200     336            mov minutes, #0
0229            337   M2:        
0229 20F910     338            jb KEY.1, M3
022C 30F9FD     339            jnb KEY.1, $                                                    ;if KEY.1 is pressed, increment seconds
022F E531       340            mov a, seconds
0231 2401       341            add a, #1
0233 D4         342            da a
0234 F531       343            mov seconds, a
0236 B46003     344            cjne A, #60H, M3
0239 753100     345            mov seconds, #0
023C            346   M3:        
023C 0201FA     347            ljmp SetTime                                                    ;loop through function until SWA.0 is not flipped
023F            348   M4:      
023F 22         349            ret
0240            350   
0240            351   ;Writes WAKE UP to LCD screen when buzzer is sounded
0240            352   WriteWakeUp:
0240 1202A1     353            lcall ClearScreen
0243 7457       354            mov a, #'W'     
0245 1202D5     355            lcall LCD_put
0248 7441       356            mov a, #'A'     
024A 1202D5     357            lcall LCD_put
024D 744B       358            mov a, #'K'     
024F 1202D5     359            lcall LCD_put
0252 7445       360            mov a, #'E'     
0254 1202D5     361            lcall LCD_put
0257 7420       362            mov a, #' '     
0259 1202D5     363            lcall LCD_put
025C 7455       364            mov a, #'U'     
025E 1202D5     365            lcall LCD_put
0261 7450       366            mov a, #'P'     
0263 1202D5     367            lcall LCD_put
0266 22         368            ret
0267            369   
0267            370   ;Writes ALARM to LCD screen when alarm is set
0267            371   WriteAlarm:
0267 1202A1     372            lcall ClearScreen
026A 7441       373            mov a, #'A'     
026C 1202D5     374            lcall LCD_put
026F 744C       375            mov a, #'L'     
0271 1202D5     376            lcall LCD_put
0274 7441       377            mov a, #'A'     
0276 1202D5     378            lcall LCD_put
0279 7452       379            mov a, #'R'     
027B 1202D5     380            lcall LCD_put
027E 744D       381            mov a, #'M'     
0280 1202D5     382            lcall LCD_put
0283 22         383            ret
0284            384   
0284            385   ;Writes clock to LCD screen when clock is incrementing
0284            386   WriteClock:
0284 1202A1     387            lcall ClearScreen
0287 7443       388            mov a, #'C'     
0289 1202D5     389            lcall LCD_put
028C 744C       390            mov a, #'L'     
028E 1202D5     391            lcall LCD_put
0291 744F       392            mov a, #'O'     
0293 1202D5     393            lcall LCD_put
0296 7443       394            mov a, #'C'     
0298 1202D5     395            lcall LCD_put
029B 744B       396            mov a, #'K'     
029D 1202D5     397            lcall LCD_put
02A0 22         398            ret
02A1            399   
02A1            400   ;Clears screen
02A1            401   ClearScreen:
02A1 7401       402            mov a, #01H 
02A3 1202C2     403            lcall LCD_command       
02A6 7928       404            mov R1, #40
02A8 1202B1     405            lcall Clr_loop
02AB 7480       406            mov a, #80H
02AD 1202C2     407            lcall LCD_command
02B0 22         408            ret
02B1            409   
02B1            410   ;
02B1            411   Clr_loop:
02B1 1202B7     412            lcall Wait40us
02B4 D9FB       413            djnz R1, Clr_loop
02B6 22         414            ret      
02B7            415            
02B7            416   Wait40us:
02B7 7895       417            mov R0, #149
02B9            418   X1: 
02B9 00         419            nop
02BA 00         420            nop
02BB 00         421            nop
02BC 00         422            nop
02BD 00         423            nop
02BE 00         424            nop
02BF D8F8       425            djnz R0, X1                                                     ;9 machine cycles-> 9*30ns*149=40us
02C1 22         426       ret
02C2            427   
02C2            428   LCD_command:
02C2 F5D9       429            mov     LCD_DATA, A
02C4 C2DA       430            clr     LCD_RS
02C6 00         431            nop
02C7 00         432            nop
02C8 D2D9       433            setb LCD_EN                                                     ;Enable pulse should be at least 230 ns
02CA 00         434            nop
02CB 00         435            nop
02CC 00         436            nop
02CD 00         437            nop
02CE 00         438            nop
02CF 00         439            nop
02D0 C2D9       440            clr     LCD_EN
02D2 0202B7     441            ljmp Wait40us
02D5            442   
02D5            443   LCD_put:
02D5 F5D9       444            mov     LCD_DATA, A
02D7 D2DA       445            setb LCD_RS
02D9 00         446            nop
02DA 00         447            nop
02DB D2D9       448            setb LCD_EN                                                     ;Enable pulse should be at least 230 ns
02DD 00         449            nop
02DE 00         450            nop
02DF 00         451            nop
02E0 00         452            nop
02E1 00         453            nop
02E2 00         454            nop
02E3 C2D9       455            clr     LCD_EN
02E5 0202B7     456            ljmp Wait40us   
02E8            457            
02E8            458   Startup:
02E8 75817F     459            mov SP, #7FH
02EB 75E800     460            mov LEDRA,#0
02EE 759500     461            mov LEDRB,#0
02F1 759E00     462            mov LEDRC,#0
02F4 75F800     463            mov LEDG,#0
02F7            464            
02F7 759A03     465            mov P0MOD, #00000011B                                   ;P0.0, P0.1 are outputs.  P0.1 is used for testing Timer 2!
02FA D280       466            setb P0.0                                               ;Sets P0.0 to 1
02FC            467   
02FC 758901     468            mov TMOD,  #00000001B                                   ;GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
02FF C28C       469            clr TR0                                                 ;Disable timer 0
0301 C28D       470            clr TF0                                                 ;Clear timer 0 flag
0303 758CFD     471            mov TH0, #high(TIMER0_RELOAD)                   ;Timer low 8-bits
0306 758A4A     472            mov TL0, #low(TIMER0_RELOAD)                    ;Timer high 8-bits
0309 D28C       473            setb TR0                                                ;Enable timer 0
030B C2A9       474            clr ET0                                                 ;Disable timer 0 interrupt
030D            475            
030D 758910     476            mov TMOD,  #00010000B                                   ;GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0310 C28E       477            clr TR1                                                 ;Disable timer 0
0312 C28F       478            clr TF1                                                 ;Clear timer 0 flag
0314 758DFD     479            mov TH1, #high(TIMER1_RELOAD)                   ;Timer low 8-bits
0317 758B4A     480            mov TL1, #low(TIMER1_RELOAD)                    ;Timer high 8-bits
031A D28E       481            setb TR1                                                ;Enable timer 0
031C C2AB       482            clr ET1
031E            483            
031E 75C800     484            mov T2CON, #00H                                                 ;Autoreload is enabled, work as a timer
0321 C2CA       485       clr TR2
0323 C2CF       486       clr TF2                                                                              
0325 75CB93     487       mov RCAP2H,#high(TIMER2_RELOAD)                      ;Set up timer 2 to interrupt every 10ms
0328 75CA7F     488       mov RCAP2L,#low(TIMER2_RELOAD)
032B D2CA       489       setb TR2                                                             ;Enable timer 2
032D D2AD       490       setb ET2                                                             ;Enable timer 2 interrupt
032F            491   
032F D2AF       492       setb EA                                                              ;Enable all interrupts
0331            493       
0331 D2DB       494       setb LCD_ON
0333 C2D9       495       clr LCD_EN                                                           ;Default state of enable must be zero
0335 1202B7     496       lcall Wait40us
0338            497       
0338 75DAFF     498       mov LCD_MOD, #0xff                                           ;Use LCD_DATA as output port
033B C2D8       499       clr LCD_RW                                                           ;Only writing to the LCD in this code.
033D            500            
033D 740C       501            mov a, #0ch                                                     ;Display on command
033F 1202C2     502            lcall LCD_command
0342 7438       503            mov a, #38H                                                     ;8-bits interface, 2 lines, 5x7 characters
0344 1202C2     504            lcall LCD_command
0347            505            
0347 120284     506            lcall WriteClock
034A            507      
034A 753100     508       mov seconds, #00H
034D 753200     509            mov minutes, #00H
0350 753312     510            mov hours, #12H
0353            511           
0353 C200       512            clr meridiem
0355 C201       513            clr meridiemAlarm
0357            514   
0357 753400     515       mov AlarmCount+0, #00H
035A 753500     516            mov AlarmCount+1, #00H
035D 753612     517            mov AlarmCount+2, #12H
0360            518   
0360            519   Forever:
0360 1201FA     520            lcall SetTime
0363 80FB       521            sjmp Forever
0365            522   EN
